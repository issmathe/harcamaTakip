import React, { useState, useEffect, useCallback, useMemo } from "react";
import {
  Typography,
  Input,
  Select,
  Button,
  DatePicker,
  message,
  Card,
  Space,
} from "antd";
import {
  DollarOutlined,
  CalendarOutlined,
  EditOutlined,
  CheckCircleOutlined,
  ShoppingOutlined, // Market ikonu eklendi
} from "@ant-design/icons";
import BottomNav from "../components/Home/BottomNav.jsx";
import { useTotalsContext } from "../context/TotalsContext";
import axios from "axios";
import dayjs from "dayjs";
import tr from "dayjs/locale/tr";

// dayjs lokalizasyonu bir kez yapÄ±lÄ±yor
dayjs.locale(tr);

const { Title, Text } = Typography;
const { Option } = Select;

// Ortam deÄŸiÅŸkenini daha gÃ¼venli kullanma (mevcut kodda zaten var, tutuluyor)
const API_URL = process.env.REACT_APP_SERVER_URL || "http://localhost:5000/api";

// Sabitler dÄ±ÅŸarÄ± taÅŸÄ±ndÄ±, bileÅŸenin yeniden render edilmesinde tekrar oluÅŸturulmaz
const ALL_CATEGORIES = [
  "Market",
  "Giyim",
  "BaÄŸÄ±ÅŸ",
  "Petrol",
  "Kira",
  "Fatura",
  "EÄŸitim",
  "SaÄŸlÄ±k",
  "UlaÅŸÄ±m",
  "EÄŸlence",
  "Elektronik",
  "Spor",
  "KÄ±rtasiye",
  "Restoran",
  "DiÄŸer",
];

const MARKETLER = [
  "Lidl",
  "Aldi",
  "DM",
  "Action",
  "Norma",
  "TÃ¼rk Market",
  "Et-Tavuk",
  "Kaufland",
  "Rewe",
  "Netto",
  "Edeka",
  "Biomarkt",
  "Penny",
  "Rossmann",
  "DiÄŸer",
];

// BaÅŸlangÄ±Ã§ formu durumu
const INITIAL_FORM_DATA = {
  miktar: "",
  kategori: "",
  altKategori: "",
  not: "",
  tarih: dayjs(),
};

// Alt bileÅŸenler iÃ§in ikon eÅŸlemesi
const ICON_MAP = {
    Miktar: <DollarOutlined className="text-green-600" />,
    Tarih: <CalendarOutlined className="text-blue-600" />,
    Not: <EditOutlined className="text-gray-600" />,
    Market: <ShoppingOutlined className="text-orange-500" />,
};

// Form AlanÄ± BileÅŸeni (Tekrar KullanÄ±labilir Alanlar iÃ§in)
const FormField = ({ label, icon, children, required = false }) => (
    <div className="mb-4">
        <Text strong className="block mb-1 flex items-center">
            <Space size={4}>
                {icon}
                {label}
                {required && <span className="text-red-500">*</span>}
            </Space>
        </Text>
        {children}
    </div>
);


const KayitEklemeContent = () => {
  const { fetchTotals } = useTotalsContext();

  const [formData, setFormData] = useState(INITIAL_FORM_DATA);
  const [loading, setLoading] = useState(false);

  // Form alanlarÄ±ndaki deÄŸiÅŸimi daha dÃ¼zenli yÃ¶netmek iÃ§in tek fonksiyon
  const handleChange = useCallback((key, value) => {
    setFormData((prev) => ({ ...prev, [key]: value }));
  }, []);

  // Kategori deÄŸiÅŸtiÄŸinde altKategori'yi sÄ±fÄ±rlama
  const handleCategoryChange = useCallback((v) => {
    handleChange("kategori", v);
    handleChange("altKategori", ""); // Kategori deÄŸiÅŸince alt kategoriyi sÄ±fÄ±rla
  }, [handleChange]);

  // iPhone/Android zoom engelleme ve font boyutu sabitleme (mevcut koddan iyileÅŸtirildi)
  // Bu tÃ¼r global DOM manipÃ¼lasyonlarÄ± genellikle zorunlu kalmadÄ±kÃ§a Ã¶nerilmez
  // ancak mobil format isteÄŸi ve mevcut kod yapÄ±sÄ± nedeniyle tutuluyor.
  useEffect(() => {
    const disableZoom = () => {
        document.body.style.touchAction = 'manipulation';
    };
    disableZoom();
    // Font bÃ¼yÃ¼klÃ¼ÄŸÃ¼ dÃ¼zeltmesi iÃ§in style tag ekleme
    const style = document.createElement("style");
    style.innerHTML = `
      input, select, textarea, button, .ant-select-selection-item {
        font-size: 16px !important;
      }
    `;
    document.head.appendChild(style);

    return () => {
        document.body.style.touchAction = '';
        document.head.removeChild(style);
    };
  }, []);
  
  // handleSubmit fonksiyonu useCallback ile Ã¶nbelleÄŸe alÄ±ndÄ±
  const handleSubmit = useCallback(async () => {
    const { miktar, kategori, tarih, altKategori } = formData;
    
    // Gerekli alan kontrolÃ¼
    if (!miktar || !kategori || !tarih) {
      return message.warning("LÃ¼tfen **miktar**, **kategori** ve **tarihi** doldurun!");
    }

    try {
      setLoading(true);
      
      // Payload oluÅŸturma ve veri dÃ¶nÃ¼ÅŸÃ¼mleri
      const payload = { ...formData };
      
      // MiktarÄ± sayÄ±ya Ã§evirme ve global formatÄ± destekleme
      payload.miktar = Number(miktar.replace(",", "."));
      
      // Tarihi ISO formatÄ±na Ã§evirme
      payload.createdAt = tarih.toISOString();

      // Market deÄŸilse altKategori'yi silme
      if (kategori !== "Market" || !altKategori) {
        delete payload.altKategori;
      }

      // 'tarih' alanÄ±nÄ± silme (Ã§Ã¼nkÃ¼ 'createdAt' kullanÄ±lÄ±yor)
      delete payload.tarih;

      await axios.post(`${API_URL}/harcama`, payload);

      message.success("Harcama kaydÄ± baÅŸarÄ±yla eklendi!");

      // Context ve Header gÃ¼ncellemesi
      await fetchTotals();

      // Form sÄ±fÄ±rlama
      setFormData(INITIAL_FORM_DATA);
    } catch (err) {
      console.error(err.response?.data || err.message);
      message.error("KayÄ±t eklenemedi! Bir sorun oluÅŸtu.");
    } finally {
      setLoading(false);
    }
  }, [formData, fetchTotals]); // formData ve fetchTotals baÄŸÄ±mlÄ±lÄ±klarÄ±

  // Dinamik olarak oluÅŸturulan kategori seÃ§enekleri (useMemo ile optimize edildi)
  const categoryOptions = useMemo(() => ALL_CATEGORIES.map((cat) => (
    <Option key={cat} value={cat}>
      {cat}
    </Option>
  )), []);

  // Dinamik olarak oluÅŸturulan market seÃ§enekleri (useMemo ile optimize edildi)
  const marketOptions = useMemo(() => MARKETLER.map((m) => (
    <Option key={m} value={m}>
      {m}
    </Option>
  )), []);

  return (
    <div className="p-4 md:p-6 lg:p-8">
      <Title level={3} className="text-center text-gray-800 mb-6 font-semibold">
        ğŸ’° Yeni Harcama KaydÄ± Ekle
      </Title>

      <Card className="shadow-2xl rounded-xl border-t-4 border-green-500 bg-white p-4">
        {/* Miktar AlanÄ± */}
        <FormField label="Miktar (â‚º)" icon={ICON_MAP.Miktar} required>
          <Input
            // inputMode="decimal" yerine numeric kullanmak mobil klavyeyi tetikleyebilir
            inputMode="numeric" 
            value={formData.miktar}
            onChange={(e) =>
              handleChange("miktar", e.target.value.replace(/[^0-9.,]/g, '')) // Sadece sayÄ±, virgÃ¼l ve nokta kabul et
            }
            placeholder="Ã–rn: 45.50"
            size="large"
            className="rounded-lg border-gray-300 focus:border-green-500"
          />
        </FormField>
        
        {/* Kategori AlanÄ± */}
        <FormField label="Kategori" icon={ICON_MAP.Kategori} required>
          <Select
            value={formData.kategori}
            onChange={handleCategoryChange}
            style={{ width: "100%" }}
            placeholder="Kategori seÃ§in"
            size="large"
            className="rounded-lg"
          >
            {categoryOptions}
          </Select>
          
          {/* Alt Kategori (Market) AlanÄ± - KoÅŸullu Render */}
          {formData.kategori === "Market" && (
            <div className="mt-4">
              <FormField label="Market SeÃ§" icon={ICON_MAP.Market}>
                <Select
                  value={formData.altKategori}
                  onChange={(v) => handleChange("altKategori", v)}
                  style={{ width: "100%" }}
                  placeholder="Market seÃ§in (isteÄŸe baÄŸlÄ±)"
                  size="large"
                  className="rounded-lg"
                  allowClear // SeÃ§imi temizleme butonu
                >
                  {marketOptions}
                </Select>
              </FormField>
            </div>
          )}
        </FormField>

        {/* Tarih AlanÄ± */}
        <FormField label="Tarih" icon={ICON_MAP.Tarih} required>
          <DatePicker
            value={formData.tarih}
            onChange={(date) => handleChange("tarih", date)}
            style={{ width: "100%" }}
            placeholder="Tarih seÃ§in"
            format="DD.MM.YYYY"
            size="large"
            className="rounded-lg border-gray-300 focus:border-blue-500"
            disabledDate={(current) => current && current > dayjs().endOf("day")} // BugÃ¼nden sonraki gÃ¼nleri devre dÄ±ÅŸÄ± bÄ±rak
            
          />
        </FormField>

        {/* Not AlanÄ± */}
        <FormField label="Not" icon={ICON_MAP.Not}>
          <Input.TextArea
            rows={2}
            value={formData.not}
            onChange={(e) => handleChange("not", e.target.value)}
            placeholder="Ek not (isteÄŸe baÄŸlÄ±)"
            size="large"
            className="rounded-lg border-gray-300 focus:border-gray-500"
          />
        </FormField>

        {/* Kaydet Butonu */}
        <Button
          type="primary"
          block
          icon={<CheckCircleOutlined />}
          onClick={handleSubmit}
          loading={loading}
          size="large"
          className="mt-6 h-12 text-lg font-bold rounded-xl bg-green-500 hover:bg-green-600 border-green-500 hover:border-green-600 transition duration-300 ease-in-out"
        >
          KaydÄ± Ekle
        </Button>
      </Card>
    </div>
  );
};

const KayitEkleme = () => (
  // min-h-screen ve relative yapÄ± mobil uyumluluk iÃ§in korundu.
  // Tailwind BG rengi hafifÃ§e deÄŸiÅŸtirildi.
  <div className="relative min-h-screen bg-gray-100"> 
    <main className="pb-20"> {/* BottomNav iÃ§in boÅŸluk bÄ±rakÄ±ldÄ± */}
      <KayitEklemeContent />
    </main>
    <BottomNav />
  </div>
);

export default KayitEkleme;